<?xml version="1.0" encoding="UTF-8"?>
<beans 
      xmlns="http://www.springframework.org/schema/beans"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xmlns:context="http://www.springframework.org/schema/context"
      xmlns:aop="http://www.springframework.org/schema/aop"
      xmlns:tx="http://www.springframework.org/schema/tx"
	  xmlns:mvc="http://www.springframework.org/schema/mvc"
		
      xsi:schemaLocation="
	
	  http://www.springframework.org/schema/beans 
	  http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
	  
	  http://www.springframework.org/schema/context
      http://www.springframework.org/schema/context/spring-context-3.0.xsd
 	  
	  http://www.springframework.org/schema/aop 
	  http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
	  
	  http://www.springframework.org/schema/tx
      http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
    
      http://www.springframework.org/schema/mvc
      http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd
        
      ">
      
      
      <!-- 配置数据源，记得去掉myBatis-config.xml的数据源相关配置 -->
      <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
      		<property name="driverClass" value="com.mysql.jdbc.Driver"></property>
      		<property name="jdbcUrl" value="jdbc:mysql://localhost:3306/easymeeting?useUnicode=true&amp;characterEncoding=UTF-8"/>
      		<property name="user" value="root"/>
      		<property name="password" value="root"/>
      </bean>
      <!-- 配置session工厂 -->      
      <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
      		<property name="dataSource" ref="dataSource"/>
      		<property name="configLocation" value="classpath:myBatis-config.xml"/>
      		<!-- 配置扫描加载SQL映射文件，记得去掉myBatis-config相关配置 -->
      		<property name="mapperLocations" value="classpath:cn/BlackHumour/easymeeting/dao/*.xml"/>
      </bean>
      
      <!-- 配置事务管理器，管理数据源事务处理 -->
      <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
      	<property name="dataSource" ref="dataSource"/>
      </bean>
      
      <!-- 配置事务通知 -->
      <tx:advice id="advice" transaction-manager="transactionManager">
      	<tx:attributes>
			<tx:method name="insert*" propagation="REQUIRED" rollback-for="Exception"/>      	
			<tx:method name="update*" propagation="REQUIRED" rollback-for="Exception"/>      	
			<tx:method name="delete*" propagation="REQUIRED" rollback-for="Exception"/>      	
			<tx:method name="*" propagation="SUPPORTS"/>      	
      	</tx:attributes>
      </tx:advice>
      
      <!-- 配置切面的范围，后面要把事务边界定在service层 -->
      <aop:config>
      	<aop:advisor advice-ref="advice" pointcut="execution(* cn.BlackHumour.easymeeting.service.impl.*.*(..))"/>
      </aop:config>
      
      <!-- 配置SessionTemplate，已经封装了繁琐的数据操作 -->
      <bean id="sqlSessonTemplate" class="org.mybatis.spring.SqlSessionTemplate">
      	<constructor-arg name="sqlSessionFactory" ref="sqlSessionFactory"></constructor-arg>
      </bean>
      
      <!-- 自动扫描组件，要把controller去掉，他们是在spring-mvc.xml中配置，如果不去掉会影响事务 -->
      <context:component-scan base-package="cn.BlackHumour">
      	<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
      </context:component-scan>
      
      <!-- 配置转换器，对于在basePackage设置的包（包括子包）下的接口类
      	如果接口类的全类名在Mapper.xml文件中和定义过命名空间一致
      	将被转换成spring的BEAN，在调用的地方通过@Autowired方式可以注入接口实例
       -->
      <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
      	<property name="sqlSessionFactory" ref="sqlSessionFactory"/>
      	<property name="basePackage" value="cn.BlackHumour.easymeeting.dao"/>
      </bean>
      
</beans>      








